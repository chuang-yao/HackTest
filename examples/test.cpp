//
// Created by Chuang Yao on 10/21/2021.
//

#include "ht/DataHandler/all.hpp"
#include "ht/Event/all.hpp"
#include "ht/HackTest.hpp"

#include <iostream>

// WARNING: std::filesystem might not work on some versions of macOS!
namespace fs = std::filesystem;
using namespace HackTest;

int main() {
  say_hello();
  std::cout << '\n';

  // creating an event queue
  EventQueue q;

  // testing manually constructing events and adding them to the event queue;
  // in the finished library, these should be automatically generated by
  // different Handlers
  MarketEvent me(q);
  SignalEvent se(q, "AAPL", "2021-01-01", "LONG", 1);
  OrderEvent oe(q, "AAPL", "MKT", 100, "SHORT");
  FillEvent fe(q, "AAPL", "NASDAQ", 100, "LONG", 100, -1);

  add_to_queue<MarketEvent>(q);
  add_to_queue<SignalEvent>(q, "AAPL", "2021-01-01", "LONG", 1);
  add_to_queue<OrderEvent>(q, "AAPL", "MKT", 100, "SHORT");
  add_to_queue<FillEvent>(q, "AAPL", "NASDAQ", 100, "LONG", 100, -1);

  q.show();
  std::cout << '\n';

  // path to the directory containing csv price files
  // please manually modify this if you want to run it on your computer
#ifdef __linux__
  fs::path path{"/home/chuang/HackTest/examples/data"};
#endif
#ifdef _WIN32
  fs::path path{R"(C:\Users\Chuang\CLionProjects\HackTest\examples\data)"};
#endif
#ifdef __APPLE__
  fs::path path{"/Users/cyao/Developer/CLionProjects/HackTest/examples/data"};
#endif

  // a list of symbols with existing csv data files
  std::vector<std::string> symbols{"AAPL", "^IXIC", "MSFT"};
  HistoricalCsvHandler dh(q, path, symbols, "2000-01-01");

  // no data on AMD, should output "No data ..."
  dh.show_data_on_date("AMD", "2019-06-13");
  std::cout << '\n';

  // test if csv file is properly read
  dh.show_data_on_date("AAPL", "2019-06-13");
  dh.show_data_on_date("AAPL", "2021-06-13");
  dh.show_data_on_date("MSFT", "2019-06-13");
  dh.show_data_on_date("MSFT", "2021-06-13");
  std::cout << '\n';

  // test if the member function is working
  auto bars{std::any_cast<std::map<std::string, YahooData>>(
      dh.get_latest_bars("AAPL", 10))};
  std::cout << "Showing the latest " << 10 << " entries for "
            << bars.begin()->first << '\n';
  for (const auto &bar : bars) {
    std::cout << bar.second;
  }
}
